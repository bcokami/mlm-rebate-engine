generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Rank {
  id                   Int                @id @default(autoincrement())
  name                 String             @unique
  level                Int                @unique
  description          String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  users                User[]
  requirements         RankRequirement?
  previousAdvancements RankAdvancement[]  @relation("PreviousRank")
  newAdvancements      RankAdvancement[]  @relation("NewRank")
  qualifiedFor         RankRequirement[]  @relation("QualifiedRank")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  name               String
  phone              String?
  profileImage       String?
  rankId             Int                 @default(1)
  uplineId           Int?
  // Binary placement fields
  leftLegId          Int?                // ID of the user in the left position
  rightLegId         Int?                // ID of the user in the right position
  placementPosition  String?             // "left" or "right" - position in upline's structure
  walletBalance      Float               @default(0)
  metadata           Json?               // Additional metadata (e.g., memberId, import info)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  purchases          Purchase[]
  rebatesGenerated   Rebate[]            @relation("RebateGenerator")
  rebatesReceived    Rebate[]            @relation("RebateReceiver")
  upline             User?               @relation("Downline", fields: [uplineId], references: [id])
  downline           User[]              @relation("Downline")
  // Binary leg relationships
  leftLeg            User?               @relation("LeftLeg", fields: [leftLegId], references: [id])
  rightLeg           User?               @relation("RightLeg", fields: [rightLegId], references: [id])
  leftParent         User[]              @relation("LeftLeg")
  rightParent        User[]              @relation("RightLeg")
  rank               Rank                @relation(fields: [rankId], references: [id])
  walletTransactions WalletTransaction[]
  rankAdvancements   RankAdvancement[]
  paymentMethods     UserPaymentMethod[]
  // Sharing and referral relations
  shareableLinks     ShareableLink[]
  referralsGiven     ReferralCommission[] @relation("ReferrerCommissions")
  referralsReceived  ReferralCommission[] @relation("BuyerCommissions")
  // Admin relations
  productAudits      ProductAudit[]
  userAudits         UserAudit[]
}

model Product {
  id                    Int                  @id @default(autoincrement())
  name                  String
  sku                   String               @unique
  description           String?
  price                 Float
  // MLM value calculations
  pv                    Float                @default(0)  // Point Value
  binaryValue           Float                @default(0)  // Binary Value
  inventory             Int                  @default(0)  // Current stock
  tags                  String?              // Comma-separated tags
  image                 String?
  isActive              Boolean              @default(true)
  // Referral commission settings
  referralCommissionType String?             // "percentage" or "fixed"
  referralCommissionValue Float?             // Percentage or fixed amount
  // Audit fields
  lastUpdatedBy         Int?
  lastUpdatedByName     String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  // Relations
  purchases             Purchase[]
  rebateConfigs         RebateConfig[]
  shareableLinks        ShareableLink[]
  referralCommissions   ReferralCommission[]
  salesHistory          ProductSalesHistory[]
  auditLogs             ProductAudit[]
}

model RebateConfig {
  id          Int      @id @default(autoincrement())
  productId   Int
  level       Int
  rewardType  String   @default("percentage") // "percentage" or "fixed"
  percentage  Float    @default(0)
  fixedAmount Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])

  @@unique([productId, level])
}

model Purchase {
  id                Int             @id @default(autoincrement())
  userId            Int
  productId         Int
  quantity          Int
  totalAmount       Float
  // Point Value of the purchase
  totalPV           Float           @default(0)
  status            String          @default("completed")
  paymentMethodId   Int?
  paymentDetails    String?         // JSON string with payment details
  referenceNumber   String?         // For tracking payment references
  // Shipping information
  shippingMethodId  Int?
  shippingDetails   String?         // JSON string with shipping details
  shippingAddress   String?         // Delivery address
  shippingFee       Float?          @default(0)
  trackingNumber    String?         // For tracking shipments
  shippingStatus    String?         @default("pending") // "pending", "processing", "shipped", "delivered", "cancelled"
  // Referral tracking
  referralLinkId    Int?
  referralSource    String?         // "link", "qrcode", etc.
  referralData      String?         // Additional referral data as JSON
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  product           Product         @relation(fields: [productId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
  paymentMethod     PaymentMethod?  @relation(fields: [paymentMethodId], references: [id])
  shippingMethod    ShippingMethod? @relation(fields: [shippingMethodId], references: [id])
  referralLink      ShareableLink?  @relation(fields: [referralLinkId], references: [id])
  rebates           Rebate[]
  referralCommission ReferralCommission?
}

model Rebate {
  id                Int               @id @default(autoincrement())
  purchaseId        Int
  receiverId        Int
  generatorId       Int
  level             Int
  rewardType        String            @default("percentage") // "percentage" or "fixed"
  percentage        Float
  amount            Float
  // PV-based amount
  pvAmount          Float             @default(0)
  status            String            @default("pending")
  processedAt       DateTime?
  walletTransactionId Int?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  generator         User              @relation("RebateGenerator", fields: [generatorId], references: [id])
  receiver          User              @relation("RebateReceiver", fields: [receiverId], references: [id])
  purchase          Purchase          @relation(fields: [purchaseId], references: [id])
  walletTransaction WalletTransaction? @relation(fields: [walletTransactionId], references: [id])

  @@index([purchaseId])
  @@index([receiverId])
  @@index([generatorId])
  @@index([status])
}

model WalletTransaction {
  id              Int             @id @default(autoincrement())
  userId          Int
  amount          Float
  type            String
  status          String          @default("completed")
  description     String?
  paymentMethodId Int?
  paymentDetails  String?         // JSON string with payment details
  referenceNumber String?         // For tracking payment references
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id])
  paymentMethod   PaymentMethod?  @relation(fields: [paymentMethodId], references: [id])
  rebates         Rebate[]
}

model PaymentMethod {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  code              String              @unique
  description       String?
  isActive          Boolean             @default(true)
  requiresDetails   Boolean             @default(false)
  detailsSchema     String?             // JSON schema for required details
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  transactions      WalletTransaction[]
  userPaymentMethods UserPaymentMethod[]
  purchases         Purchase[]
}

model ShippingMethod {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  code              String              @unique
  description       String?
  isActive          Boolean             @default(true)
  requiresDetails   Boolean             @default(false)
  detailsSchema     String?             // JSON schema for required details
  baseFee           Float               @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  purchases         Purchase[]
}

model UserPaymentMethod {
  id              Int           @id @default(autoincrement())
  userId          Int
  paymentMethodId Int
  details         String        // JSON string with payment details (e.g., GCash number)
  isDefault       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  @@unique([userId, paymentMethodId])
}

model RankRequirement {
  id                Int      @id @default(autoincrement())
  rankId            Int      @unique
  personalPV        Float    @default(0)
  groupPV           Float    @default(0)
  directReferrals   Int      @default(0)
  qualifiedRankId   Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  rank              Rank     @relation(fields: [rankId], references: [id])
  qualifiedRank     Rank?    @relation("QualifiedRank", fields: [qualifiedRankId], references: [id])
}

model RankAdvancement {
  id            Int      @id @default(autoincrement())
  userId        Int
  previousRankId Int
  newRankId     Int
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  previousRank  Rank     @relation("PreviousRank", fields: [previousRankId], references: [id])
  newRank       Rank     @relation("NewRank", fields: [newRankId], references: [id])
}

model BonusReward {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  rewardType  String   @default("fixed") // "fixed" or "percentage"
  amount      Float    @default(0)
  percentage  Float    @default(0)
  triggerType String   // "rank_advancement", "sales_milestone", "team_size", etc.
  triggerValue String? // JSON string with trigger conditions
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New model for tracking monthly PV and commissions
model MonthlyPerformance {
  id                Int      @id @default(autoincrement())
  userId            Int
  year              Int
  month             Int
  personalPV        Float    @default(0)
  leftLegPV         Float    @default(0)
  rightLegPV        Float    @default(0)
  totalGroupPV      Float    @default(0)
  directReferralBonus Float  @default(0)
  levelCommissions  Float    @default(0)
  groupVolumeBonus  Float    @default(0)
  totalEarnings     Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, year, month])
}

// New model for commission rates configuration
model CommissionRate {
  id                Int      @id @default(autoincrement())
  type              String   // "direct_referral", "level_commission", "group_volume", "performance_bonus"
  level             Int?     // For level-based commissions
  percentage        Float    @default(0)
  fixedAmount       Float    @default(0)
  description       String?
  active            Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([type, level])
}

// System configuration model
model SystemConfig {
  id                Int      @id @default(autoincrement())
  key               String   @unique
  value             String
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Performance bonus tiers
model PerformanceBonusTier {
  id                Int      @id @default(autoincrement())
  name              String
  minSales          Float    // Minimum sales amount to qualify
  maxSales          Float?   // Maximum sales amount for this tier (null for unlimited)
  bonusType         String   // "percentage" or "fixed"
  percentage        Float    @default(0)
  fixedAmount       Float    @default(0)
  active            Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Monthly cutoff configuration
model MonthlyCutoff {
  id                Int      @id @default(autoincrement())
  year              Int
  month             Int
  cutoffDay         Int      // Day of month for cutoff
  processedAt       DateTime?
  status            String   @default("pending") // "pending", "processing", "completed", "failed"
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([year, month])
}

// Model for tracking product audit logs
model ProductAudit {
  id          Int      @id @default(autoincrement())
  productId   Int
  userId      Int
  userName    String
  action      String   // "create", "update", "delete", "activate", "deactivate", etc.
  details     String?  // JSON string with details of the changes
  createdAt   DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}

// Model for tracking user audit logs
model UserAudit {
  id          Int      @id @default(autoincrement())
  userId      Int
  action      String   // "import", "export", "create", "update", "delete", etc.
  details     String?  // JSON string with details of the action
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

// Model for tracking product sales history by month
model ProductSalesHistory {
  id          Int      @id @default(autoincrement())
  productId   Int
  year        Int
  month       Int
  quantity    Int      @default(0)
  revenue     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, year, month])
}

// Model for shareable product links
model ShareableLink {
  id                Int       @id @default(autoincrement())
  userId            Int       // User who created the link
  productId         Int?      // Optional: specific product being shared
  code              String    @unique // Unique code for the link
  type              String    @default("product") // "product", "referral", etc.
  title             String?   // Optional custom title
  description       String?   // Optional custom description
  customImage       String?   // Optional custom image URL
  isActive          Boolean   @default(true)
  expiresAt         DateTime? // Optional expiration date
  clickCount        Int       @default(0)
  conversionCount   Int       @default(0) // Number of purchases made through this link
  totalRevenue      Float     @default(0) // Total revenue generated through this link
  totalCommission   Float     @default(0) // Total commission earned from this link
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])
  product           Product?  @relation(fields: [productId], references: [id])
  purchases         Purchase[]
  linkClicks        LinkClick[]
  referralCommissions ReferralCommission[]
}

// Model for tracking link clicks
model LinkClick {
  id                Int           @id @default(autoincrement())
  linkId            Int
  ipAddress         String?
  userAgent         String?
  referrer          String?
  utmSource         String?
  utmMedium         String?
  utmCampaign       String?
  createdAt         DateTime      @default(now())
  link              ShareableLink @relation(fields: [linkId], references: [id])
}

// Model for tracking referral commissions
model ReferralCommission {
  id                Int           @id @default(autoincrement())
  purchaseId        Int           @unique
  linkId            Int
  referrerId        Int           // User who referred (created the link)
  buyerId           Int           // User who made the purchase
  productId         Int
  amount            Float         // Commission amount
  percentage        Float         // Commission percentage
  status            String        @default("pending") // "pending", "approved", "paid", "rejected"
  paidAt            DateTime?     // When the commission was paid
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  purchase          Purchase      @relation(fields: [purchaseId], references: [id])
  link              ShareableLink @relation(fields: [linkId], references: [id])
  referrer          User          @relation("ReferrerCommissions", fields: [referrerId], references: [id])
  buyer             User          @relation("BuyerCommissions", fields: [buyerId], references: [id])
  product           Product       @relation(fields: [productId], references: [id])
}
