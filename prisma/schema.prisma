generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Rank {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  level       Int      @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  name               String
  phone              String?
  rankId             Int                 @default(1)
  uplineId           Int?
  sponsorId          Int?                // For binary structure
  sponsorPosition    String?             // "left" or "right" for binary structure
  walletBalance      Float               @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  profileImage       String?
  isActive           Boolean             @default(true)
  testData           Boolean             @default(false)  // Flag for test data
  testScenario       String?             // Test scenario identifier
  cleanupToken       String?             // Token for cleanup
  purchases          Purchase[]
  rebatesGenerated   Rebate[]            @relation("RebateGenerator")
  rebatesReceived    Rebate[]            @relation("RebateReceiver")
  upline             User?               @relation("Downline", fields: [uplineId], references: [id])
  downline           User[]              @relation("Downline")
  sponsor            User?               @relation("Sponsored", fields: [sponsorId], references: [id])
  sponsored          User[]              @relation("Sponsored")
  rank               Rank                @relation(fields: [rankId], references: [id])
  walletTransactions WalletTransaction[]
  passwordReset      PasswordReset?
  orders             Order[]
  shippingAddresses  ShippingAddress[]
  wallet             Wallet?
  shareableLinks     ShareableLink[]
  notifications      Notification[]
}

model Product {
  id                    Int                  @id @default(autoincrement())
  name                  String
  sku                   String               @unique
  description           String?
  price                 Float                // Member price (discounted)
  srp                   Float                // Suggested Retail Price for non-members
  pv                    Float                @default(0) // Point Value for rebate calculations
  binaryValue           Float                @default(0) // Binary value for binary compensation
  inventory             Int                  @default(0) // Current inventory
  lowStockThreshold     Int?                 // Threshold for low stock notifications
  tags                  String?              // Comma-separated tags
  image                 String?
  isActive              Boolean              @default(true)
  referralCommissionType String?             // "percentage" or "fixed"
  referralCommissionValue Float?             // Percentage or fixed amount
  lastUpdatedBy         Int?                 // User ID who last updated
  lastUpdatedByName     String?              // User name who last updated
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  purchases             Purchase[]
  rebateConfigs         RebateConfig[]
  shareableLinks        ShareableLink[]
  inventoryTransactions InventoryTransaction[]
  notifications         Notification[]
}

model RebateConfig {
  id         Int      @id @default(autoincrement())
  productId  Int
  level      Int
  percentage Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, level])
}

model Purchase {
  id          Int      @id @default(autoincrement())
  userId      Int?     // Optional for guest purchases
  productId   Int
  quantity    Int
  unitPrice   Float    // Price per unit at time of purchase
  totalAmount Float
  priceType   String   @default("member") // "member" or "srp"
  status      String   @default("completed")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  testData    Boolean  @default(false)  // Flag for test data
  cleanupToken String? // Token for cleanup
  product     Product  @relation(fields: [productId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
  rebates     Rebate[]
  orderId     Int?
  order       Order?   @relation(fields: [orderId], references: [id])
}

model Rebate {
  id          Int       @id @default(autoincrement())
  purchaseId  Int
  receiverId  Int
  generatorId Int
  level       Int
  percentage  Float
  amount      Float
  status      String    @default("pending")
  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  testData    Boolean   @default(false)  // Flag for test data
  cleanupToken String?  // Token for cleanup
  generator   User      @relation("RebateGenerator", fields: [generatorId], references: [id])
  receiver    User      @relation("RebateReceiver", fields: [receiverId], references: [id])
  purchase    Purchase  @relation(fields: [purchaseId], references: [id])
}

model WalletTransaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Float
  type        String
  status      String   @default("completed")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                Int              @id @default(autoincrement())
  userId            Int?             // Optional for guest orders
  orderNumber       String           @unique
  customerName      String?          // For guest orders
  customerEmail     String?          // For guest orders
  customerPhone     String?          // For guest orders
  isGuestOrder      Boolean          @default(false)
  subtotal          Float
  shippingFee       Float
  tax               Float            @default(0)
  discount          Float            @default(0)
  total             Float
  status            String           @default("pending") // pending, processing, shipped, delivered, cancelled
  paymentStatus     String           @default("pending") // pending, paid, failed, refunded
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User?            @relation(fields: [userId], references: [id])
  purchases         Purchase[]
  shippingAddressId Int?
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingMethodId  Int?
  shippingMethod    ShippingMethod?  @relation(fields: [shippingMethodId], references: [id])
  payments          Payment[]
  trackingNumber    String?
  estimatedDelivery DateTime?
}

model ShippingAddress {
  id           Int      @id @default(autoincrement())
  userId       Int?     // Optional for guest addresses
  name         String
  phone        String
  email        String?  // For guest addresses
  addressLine1 String
  addressLine2 String?
  city         String
  region       String
  postalCode   String
  isDefault    Boolean  @default(false)
  isGuestAddress Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id])
  orders       Order[]
}

model ShippingMethod {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  price       Float
  estimatedDeliveryDays Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Payment {
  id              Int      @id @default(autoincrement())
  orderId         Int
  amount          Float
  paymentMethod   String   // credit_card, gcash, maya, bank_transfer, wallet, cod
  status          String   @default("pending") // pending, completed, failed, refunded
  transactionId   String?
  paymentDetails  String?  // JSON string with payment details
  receiptUrl      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id])
}

// Wallet model for managing user balances
model Wallet {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  balance      Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  testData     Boolean  @default(false)  // Flag for test data
  cleanupToken String?  // Token for cleanup
  user         User     @relation(fields: [userId], references: [id])
}

// Shareable link model for product sharing
model ShareableLink {
  id               Int       @id @default(autoincrement())
  userId           Int
  productId        Int?
  code             String    @unique
  type             String    @default("product") // "product", "referral", etc.
  title            String?
  description      String?
  customImage      String?
  isActive         Boolean   @default(true)
  expiresAt        DateTime?
  clickCount       Int       @default(0)
  conversionCount  Int       @default(0)
  totalRevenue     Float     @default(0)
  totalCommission  Float     @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  testData         Boolean   @default(false)  // Flag for test data
  cleanupToken     String?   // Token for cleanup
  user             User      @relation(fields: [userId], references: [id])
  product          Product?  @relation(fields: [productId], references: [id])
  clicks           LinkClick[]
}

// Link click model for tracking clicks on shareable links
model LinkClick {
  id          Int       @id @default(autoincrement())
  linkId      Int
  ipAddress   String?
  userAgent   String?
  referrer    String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  createdAt   DateTime  @default(now())
  testData    Boolean   @default(false)  // Flag for test data
  cleanupToken String?  // Token for cleanup
  link        ShareableLink @relation(fields: [linkId], references: [id])
}

// Inventory transaction model for tracking inventory changes
model InventoryTransaction {
  id            Int       @id @default(autoincrement())
  productId     Int
  quantity      Int       // Positive for additions, negative for reductions
  type          String    // "purchase", "adjustment", "return", "restock"
  reference     String?   // Reference to the source of the transaction (e.g., "Order #123")
  referenceId   Int?      // ID of the reference entity (e.g., order ID)
  notes         String?   // Additional notes about the transaction
  createdBy     Int?      // User ID who created the transaction
  createdByName String?   // User name who created the transaction
  createdAt     DateTime  @default(now())
  product       Product   @relation(fields: [productId], references: [id])
}

// Notification model for system notifications
model Notification {
  id          Int       @id @default(autoincrement())
  type        String    // "low_stock", "system", etc.
  title       String
  message     String
  isRead      Boolean   @default(false)
  productId   Int?
  userId      Int?
  createdAt   DateTime  @default(now())
  readAt      DateTime?
  product     Product?  @relation(fields: [productId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
}
