generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Rank {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  level       Int      @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  name               String
  phone              String?
  profileImage       String?
  rankId             Int                 @default(1)
  uplineId           Int?
  walletBalance      Float               @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  purchases          Purchase[]
  rebatesGenerated   Rebate[]            @relation("RebateGenerator")
  rebatesReceived    Rebate[]            @relation("RebateReceiver")
  upline             User?               @relation("Downline", fields: [uplineId], references: [id])
  downline           User[]              @relation("Downline")
  rank               Rank                @relation(fields: [rankId], references: [id])
  walletTransactions WalletTransaction[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  image         String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  purchases     Purchase[]
  rebateConfigs RebateConfig[]
}

model RebateConfig {
  id         Int      @id @default(autoincrement())
  productId  Int
  level      Int
  percentage Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, level])
}

model Purchase {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  quantity    Int
  totalAmount Float
  status      String   @default("completed")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  rebates     Rebate[]
}

model Rebate {
  id          Int       @id @default(autoincrement())
  purchaseId  Int
  receiverId  Int
  generatorId Int
  level       Int
  percentage  Float
  amount      Float
  status      String    @default("pending")
  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  generator   User      @relation("RebateGenerator", fields: [generatorId], references: [id])
  receiver    User      @relation("RebateReceiver", fields: [receiverId], references: [id])
  purchase    Purchase  @relation(fields: [purchaseId], references: [id])
}

model WalletTransaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  amount      Float
  type        String
  status      String   @default("completed")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}
